1. ((lambda (x) (+ x x)) 4) [PASS]
2. ((lambda x x) 3 4 5 6) [PASS]
3. ((lambda (x y . z) z) 3 4 5 6) [PASS]
4. (if (> 3 2) (quote yes) (quote no)) [PASS]
5. (if (> 2 3) (quote yes) (quote no)) [PASS]
6. (if (> 3 2) (- 3 2) (+ 3 2)) [PASS]
7. (cond ((> 3 2) (quote greater)) ((< 3 2) (quote less))) [PASS]
8. (cond ((> 3 3) (quote greater)) ((< 3 3) (quote less)) (else (quote equal))) [PASS]
9. (case (* 2 3) ((2 3 5 7) (quote prime)) ((1 4 6 8 9) (quote composite))) [PASS]
10. (case (car (quote (c d))) ((a e i o u) (quote vowel)) ((w y) (quote semivowel)) (else (quote consonant))) [PASS]
11. (and (= 2 2) (> 2 1)) [PASS]
12. (and (= 2 2) (< 2 1)) [PASS]
13. (and 1 2 (quote c) (quote (f g))) [PASS]
14. (and) [PASS]
15. (or (= 2 2) (> 2 1)) [PASS]
16. (or (= 2 2) (< 2 1)) [PASS]
17. (or (memq (quote b) (quote (a b c))) (/ 3 0)) [PASS]
18. (let ((x 2) (y 3)) (* x y)) [PASS]
19. (let ((x 2) (y 3)) (let ((x 7) (z (+ x y))) (* z x))) [PASS]
20. (let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x))) [PASS]
21. (let () (define x 2) (define f (lambda () (- x))) (f)) [PASS]
22. let*-def [PASS]
23. (do ((vec (make-vector 5)) (i 0 (+ i 1))) ((= i 5) vec) (vector-set! vec i i)) [PASS]
24. (let ((x (quote (1 3 5 7 9)))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum))) [PASS]
25. (let loop ((numbers (quote (3 -2 1 6 -5))) (nonneg (quote ())) (neg (quote ()))) (cond ((null? numbers) (list nonneg neg)) ((>= (car numbers) 0) (loop (cdr numbers) (cons (car numbers) nonneg) neg)) ((< (car numbers) 0) (loop (cdr numbers) nonneg (cons (car numbers) neg))))) [PASS]
26. (quasiquote (list (unquote (+ 1 2)) 4)) [PASS]
27. (let ((name (quote a))) (quasiquote (list (unquote name) (quote (unquote name))))) [PASS]
28. (quasiquote (a (unquote (+ 1 2)) (unquote-splicing (map abs (quote (4 -5 6)))) b)) [PASS]
29. (quasiquote (a (quasiquote (b (unquote (+ 1 2)) (unquote (foo (unquote (+ 1 3)) d)) e)) f)) [PASS]
30. (let ((name1 (quote x)) (name2 (quote y))) (quasiquote (a (quasiquote (b (unquote (unquote name1)) (unquote (quote (unquote name2))) d)) e))) [PASS]
31. (quasiquote (list (unquote (+ 1 2)) 4)) [PASS]
32. (eqv? (quote a) (quote a)) [PASS]
33. (eqv? (quote a) (quote b)) [PASS]
34. (eqv? (quote ()) (quote ())) [PASS]
35. (eqv? (cons 1 2) (cons 1 2)) [PASS]
36. (eqv? (lambda () 1) (lambda () 2)) [PASS]
37. (let ((p (lambda (x) x))) (eqv? p p)) [PASS]
38. (eq? (quote a) (quote a)) [PASS]
39. (eq? (list (quote a)) (list (quote a))) [PASS]
40. (eq? (quote ()) (quote ())) [PASS]
41. (eq? car car) [PASS]
42. (let ((x (quote (a)))) (eq? x x)) [PASS]
43. (let ((p (lambda (x) x))) (eq? p p)) [PASS]
44. (equal? (quote a) (quote a)) [PASS]
45. (equal? (quote (a)) (quote (a))) [PASS]
46. (equal? (quote (a (b) c)) (quote (a (b) c))) [PASS]
47. (equal? abc abc) [PASS]
48. (equal? abc abcd) [PASS]
49. (equal? a b) [PASS]
50. (equal? 2 2) [PASS]
51. (equal? (make-vector 5 (quote a)) (make-vector 5 (quote a))) [PASS]
52. (max 3 4) [PASS]
53. (+ 3 4) [PASS]
54. (+ 3) [PASS]
55. (+) [PASS]
56. (* 4) [PASS]
57. (*) [PASS]
58. (- 3 4) [PASS]
59. (- 3 4 5) [PASS]
60. (- 3) [PASS]
61. (abs -7) [PASS]
62. (modulo 13 4) [PASS]
63. (remainder 13 4) [PASS]
64. (modulo -13 4) [PASS]
65. (remainder -13 4) [PASS]
66. (modulo 13 -4) [PASS]
67. (remainder 13 -4) [PASS]
68. (modulo -13 -4) [PASS]
69. (remainder -13 -4) [PASS]
70. (string->number 100) [PASS]
71. (string->number 100 16) [PASS]
72. (string->number 177 8) [PASS]
73. (string->number 101 2) [PASS]
74. (number->string 100) [PASS]
75. (number->string 256 16) [PASS]
76. (number->string 255 16) [PASS]
77. (number->string 127 8) [PASS]
78. (number->string 5 2) [PASS]
79. (not 3) [PASS]
80. (not (list 3)) [PASS]
81. (not (quote ())) [PASS]
82. (not (list)) [PASS]
83. (not (quote ())) [PASS]
84. (boolean? 0) [PASS]
85. (boolean? (quote ())) [PASS]
86. (pair? (quote (a . b))) [PASS]
87. (pair? (quote (a b c))) [PASS]
88. (cons (quote a) (quote ())) [PASS]
89. (cons (quote (a)) (quote (b c d))) [PASS]
90. (cons a (quote (b c))) [PASS]
91. (cons (quote a) 3) [PASS]
92. (cons (quote (a b)) (quote c)) [PASS]
93. (car (quote (a b c))) [PASS]
94. (car (quote ((a) b c d))) [PASS]
95. (car (quote (1 . 2))) [PASS]
96. (cdr (quote ((a) b c d))) [PASS]
97. (cdr (quote (1 . 2))) [PASS]
98. (list? (quote (a b c))) [PASS]
99. (list? (quote ())) [PASS]
100. (list? (quote (a . b))) [PASS]
101. (let ((x (list (quote a)))) (set-cdr! x x) (list? x)) [PASS]
102. (list (quote a) (+ 3 4) (quote c)) [PASS]
103. (list) [PASS]
104. (length (quote (a b c))) [PASS]
105. (length (quote (a (b) (c d e)))) [PASS]
106. (length (quote ())) [PASS]
107. (append (quote (x)) (quote (y))) [PASS]
108. (append (quote (a)) (quote (b c d))) [PASS]
109. (append (quote (a (b))) (quote ((c)))) [PASS]
110. (append (quote (a b)) (quote (c . d))) [PASS]
111. (append (quote ()) (quote a)) [PASS]
112. (reverse (quote (a b c))) [PASS]
113. (reverse (quote (a (b c) d (e (f))))) [PASS]
114. (list-ref (quote (a b c d)) 2) [PASS]
115. (memq (quote a) (quote (a b c))) [PASS]
116. (memq (quote b) (quote (a b c))) [PASS]
117. (memq (quote a) (quote (b c d))) [PASS]
118. (memq (list (quote a)) (quote (b (a) c))) [PASS]
119. (member (list (quote a)) (quote (b (a) c))) [PASS]
120. (memv 101 (quote (100 101 102))) [PASS]
121. (assq (list (quote a)) (quote (((a)) ((b)) ((c))))) [PASS]
122. (assoc (list (quote a)) (quote (((a)) ((b)) ((c))))) [PASS]
123. (assv 5 (quote ((2 3) (5 7) (11 13)))) [PASS]
124. (symbol? (quote foo)) [PASS]
125. (symbol? (car (quote (a b)))) [PASS]
126. (symbol? bar) [PASS]
127. (symbol? (quote nil)) [PASS]
128. (symbol? (quote ())) [PASS]
129. (symbol->string (quote flying-fish)) [PASS]
130. (symbol->string (string->symbol Malvina)) [PASS]
131. (string? a) [PASS]
132. (string? (quote a)) [PASS]
133. (string-length ) [PASS]
134. (string-length abc) [PASS]
135. (string-ref abc 0) [PASS]
136. (string-ref abc 2) [PASS]
137. (string=? a (string a)) [PASS]
138. (string=? a (string b)) [PASS]
139. (string<? a aa) [PASS]
140. (string<? aa a) [PASS]
141. (string<? a a) [PASS]
142. (string<=? a aa) [PASS]
143. (string<=? a a) [PASS]
144. (string=? a (make-string 1 a)) [PASS]
145. (string=? a (make-string 1 b)) [PASS]
146. (substring abc 0 0) [PASS]
147. (substring abc 0 1) [PASS]
148. (substring abc 1 3) [PASS]
149. (string-append abc ) [PASS]
150. (string-append  abc) [PASS]
151. (string-append a bc) [PASS]
152. (let ((vec (vector 0 (quote (2 2 2 2)) Anna))) (vector-set! vec 1 (quote (Sue Sue))) vec) [PASS]
153. (vector->list (quote #(dah dah didah))) [PASS]
154. (list->vector (quote (dididit dah))) [PASS]
155. (procedure? car) [PASS]
156. (procedure? (quote car)) [PASS]
157. (procedure? (lambda (x) (* x x))) [PASS]
158. (procedure? (quote (lambda (x) (* x x)))) [PASS]
159. (call-with-current-continuation procedure?) [PASS]
160. (call-with-current-continuation (lambda (k) (+ 2 5))) [PASS]
161. (call-with-current-continuation (lambda (k) (+ 2 5 (k 3)))) [PASS]
162. (apply + (list 3 4)) [PASS]
163. (map cadr (quote ((a b) (d e) (g h)))) [PASS]
164. (map + (quote (1 2 3)) (quote (4 5 6))) [PASS]
165. (let ((v (make-vector 5))) (for-each (lambda (i) (vector-set! v i (* i i))) (quote (0 1 2 3 4))) v) [PASS]
166. (force (delay (+ 1 2))) [PASS]
167. (let ((p (delay (+ 1 2)))) (list (force p) (force p))) [PASS]
168. (let ((else 1)) (cond (else (quote ok)) (#t (quote bad)))) [PASS]
169. (let ((=> 1)) (cond (#t => (quote ok)))) [PASS]
170. (let ((unquote 1)) (quasiquote ((unquote foo)))) [PASS]
171. (let ((unquote-splicing 1)) (quasiquote ((unquote-splicing foo)))) [PASS]
172. (let ((... 2)) (let-syntax ((s (syntax-rules () ((_ x ...) (quote bad)) ((_ . r) (quote ok))))) (s a b c))) [PASS]
173. ((lambda () (let ((x 1)) (let ((y x)) (set! x 2) (list x y))))) [PASS]
174. ((lambda () (let ((x 1)) (set! x 2) (let ((y x)) (list x y))))) [PASS]
175. ((lambda () (let ((x 1)) (let ((y x)) (set! y 2) (list x y))))) [PASS]
176. ((lambda () (let ((x 1)) (let ((y x)) (set! x 2) (set! y 3) (list x y))))) [PASS]
176 out of 176 passed (100%)
