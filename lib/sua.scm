;; "Storage use analysis and its applications" Manuel Serrano, Marc Feeley
;; and the follow-up paper
;; "Abstract compilation: a new implementation paradigm for static analysis" Dominique Boucher, Marc Feeley

(define db (make-hash-table eq?))
(define math-ops '(ADD SUB MUL DIV))
(define changed #f)
(define (update-db sexp types)
  (let* ((prev (hash-table-ref/default db sexp '()))
	 (new (lset-union eq? types prev)))
    (unless (lset= eq? new prev)
      ;(display "UPDATEDB:") (display sexp) (display ":") (display types) (newline)
      (set! changed #t)
      (hash-table-set! db sexp new))))

(define (analyze s env)
  (let ((types
	 (match s
	   ((let ((,args ,inits) ___) ,body)
	    (for (arg init) (args inits)
		 (update-db arg (analyze init env)))
	    (analyze body env))
	   ((primcall ,op ,arg1 ,arg2)
	    (guard (memq op math-ops))
	    (let ((t1 (analyze arg1 env))
		  (t2 (analyze arg2 env)))
	      (if (or (equal? t1 '(flonum))
		      (equal? t2 '(flonum)))
		  '(flonum)
		  '(number))))
	   ((if ,test ,true ,false)
	    (analyze test env)
	    (let ((true-type (analyze true env))
		  (false-type (analyze false env)))
	      (lset-union eq? true-type false-type)))
	   ((begin ,args ___ ,tail)
	    (for arg args
		 (analyze arg env))
	    (analyze tail env))
	   ((loop ,vars ,name ,body ,inits ___)
	    (for (var init) (vars inits)
		 (update-db var (analyze init env)))
	    (analyze body (append (list (cons name s)) env)))
	   ((quote ,x) '(unkown))
	   ((call ,loopvar ,args ___)
	    (guard (assq loopvar env))
	    (let ((v (cdr (assq loopvar env)))
		  (arg-types (omap arg args (analyze arg env))))
	      (for (arg-type arg-name) (arg-types (second v))
		   (update-db arg-name arg-type))
	      (hash-table-ref/default db v '())))
	   ((call (lookup inexact) ,var)
	    (analyze var env)
	    '(flonum))
	   ((call ,args ___)
	    (for arg args (analyze arg env))
	    '(unknown))
	   (,var
	    (guard (symbol? var))
	    (hash-table-ref/default db var '(unknown)))
	   ((lookup ,var)
	    (hash-table-ref/default db var '(unknown)))
	   ((primcall ,op ,args ___)
	    ;; Unknown call or something.
	    (for arg args (analyze arg env))
	    '(unknown))
	   (,flonum
	    (guard (inexact? flonum))
	    '(flonum))
	   (,num
	    (guard (number? num))
	    '(number))
	   (,else '(unknown)))))
    (update-db s types)
    types))
(define (op-to-flonum-op op)
  (string->symbol (string-append "FLONUM-" (symbol->string op))))
(define (sua s type env)
  (match s
    ((primcall ,op ,a ,b)
     (guard (and (memq op math-ops)
		 (equal? '(flonum) (hash-table-ref/default db a '()))
		 (equal? '(flonum) (hash-table-ref/default db b '()))))
     (let ((op `(primcall ,(op-to-flonum-op op) ,(sua a 'flonum env) ,(sua b 'flonum env))))
       (if (eq? type 'flonum)
	   op
	   `(flonum-box ,op))))
    ((let ((,names ,inits) ___) ,body)
     (let* ((types (omap name names (if (equal? (hash-table-ref/default db name '()) '(flonum))
					   'flonum
					   'unknown)))
	    (inits (omap (type init) (types inits)
			 (sua init type env))))
       `(let ((,names ,types ,inits) ___)
	  ,(sua body type env))))
    ((loop ,vars ,name ,body ,inits ___)
     (let* ((types (omap var vars (if (equal? (hash-table-ref/default db var '()) '(flonum))
					   'flonum
					   'unknown)))
	    (inits (omap (type init) (types inits)
			 (sua init type env))))
       `(loop (,vars ,types) ___ ,name ,(sua body 'unknown (append (list (cons name types)) env)) ,inits ___)))
    (,flonum
     (guard (inexact? flonum))
     (if (eq? 'flonum type)
	 flonum
	 `(box-flonum ,flonum)))
    ((call ,loopvar ,args ___)
     (guard (assq loopvar env))
     (let* ((arg-types (cdr (assq loopvar env)))
	    (args (map (lambda (arg type) (sua arg type env)) args arg-types)))
       `(call ,loopvar ,args ___)))
    ((,args ___)
     (omap arg args (sua arg 'unknown env)))
    (,var
     (guard (hash-table-exists? db var))
     (let ((var-type (if (equal? (hash-table-ref/default db var '()) '(flonum))
			 'flonum
			 'unknown)))
       (if (eq? var-type 'flonum)
	   (if (eq? type 'flonum)
	       var
	       `(flonum-box ,var))
	   (if (eq? type 'flonum)
	       `(flonum-unbox ,var)
	       var))))
    (,else
     else)))

(define (storage-use-analysis s)
  (let loop ((i 0))
    (analyze s '())
    ;; (display "DB:") (display i) (newline)
    ;; (pretty-print (hash-table->alist db))
    (when changed
      (set! changed #f)
      (loop (+ i 1))))
  ;; Now update
  (sua s 'unknown '()))
